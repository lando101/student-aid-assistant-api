const express = require('express');
const axios = require('axios');
const router = express.Router();
router.use(express.json());

const OpenAI = require('openai');
require('dotenv').config();

// Define your OpenAI API key (replace with your actual API key)
const openaiApiKey = process.env.OPENAI_API_KEY;

// Initialize OpenAI
const openai = new OpenAI({openaiApiKey});

// Set assistant ID
const assistantId = 'asst_FdAZP7oZJczaj4FDcQGiK4pi'

// Define an endpoint to interact with OpenAI
/**
 * @swagger
 * /api/openai:
 *   post:
 *     summary: Get a response from OpenAI
 *     description: Send a prompt to OpenAI and receive a generated text response.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               prompt:
 *                 type: string
 *                 description: The prompt to send to OpenAI.
 *                 example: "Translate the following English text to French: 'Hello, how are you?'"
 *     responses:
 *       200:
 *         description: Successfully received a response from OpenAI.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 response:
 *                   type: string
 *                   description: The response text generated by OpenAI.
 *       500:
 *         description: An error occurred while interacting with OpenAI.
 */
router.post('/api/openai', async (req, res) => {
  try {
    const { prompt } = req.body;

    const response = await axios.post(
      'https://api.openai.com/v1/engines/davinci/completions',
      {
        prompt,
        max_tokens: 50, // Adjust the number of tokens as needed
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${openaiApiKey}`,
        },
      }
    );

    res.json(response.data.choices[0].text);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/assistants:
 *   get:
 *     summary: Retrieve a list of assistants from OpenAI
 *     description: Fetches a list of the latest 20 assistants from OpenAI.
 *     responses:
 *       200:
 *         description: A list of assistants
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 assistants:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                         description: The assistant ID.
 *                       name:
 *                         type: string
 *                         description: The name of the assistant.
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/assistants', async (req, res) => {
  try {
      // const response = await axios.get('https://api.openai.com/v1/assistants', {
      //     params: {
      //         order: 'desc',
      //         limit: 20
      //     },
      //     headers: {
      //         'Content-Type': 'application/json',
      //         'Authorization': `Bearer ${openaiApiKey}`,
      //         'OpenAI-Beta': 'assistants=v1'
      //     }
      // });
      const myAssistants = await openai.beta.assistants.list({
        order: "desc",
        limit: "20",
      });

      res.json(myAssistants.data);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/assistant/{assistantId}:
 *   get:
 *     summary: Retrieve details of a specific OpenAI assistant
 *     description: Fetches details of the specified assistant from OpenAI.
 *     parameters:
 *       - in: path
 *         name: assistantId
 *         required: true
 *         description: Unique identifier of the assistant.
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Details of the specified assistant
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   description: The assistant ID.
 *                 object:
 *                   type: string
 *                   description: Object type (usually 'assistant').
 *                 # Add other properties as per the OpenAI response structure
 *       404:
 *         description: Assistant not found
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */

router.get('/assistant/:assistantId', async (req, res) => {
  const assistantId = req.params.assistantId;
  // id: asst_FdAZP7oZJczaj4FDcQGiK4pi
  try {
      const response = await axios.get(`https://api.openai.com/v1/assistants/${assistantId}`, {
          headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${openaiApiKey}`,
              'OpenAI-Beta': 'assistants=v1'
          }
      });

      res.json(response.data);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/threads:
 *   get:
 *     summary: Retrieve threads from OpenAI
 *     description: Fetches threads from the OpenAI API.
 *     responses:
 *       200:
 *         description: A list of threads from OpenAI
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 threads:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                         description: The thread ID.
 *                       # Define other properties as needed
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/threads', async (req, res) => {
  try {
      // const response = await axios.get('https://api.openai.com/v1/threads', {
      //     headers: {
      //         'Content-Type': 'application/json',
      //         'Authorization': `Bearer ${openaiApiKey}`,
      //         'OpenAI-Beta': 'assistants=v1'
      //     }
      // });

      res.json(response.data);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/threads/{threadsId}:
 *   get:
 *     summary: Retrieve a specific thread
 *     description: Retrieves details of a specific thread using the OpenAI API.
 *     parameters:
 *       - in: path
 *         name: threadsId
 *         required: true
 *         description: Unique identifier of the thread to be retrieved.
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Successfully retrieved the thread
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 # Define the properties of the thread object if available
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/threads/:threadsId', async (req, res) => {
  try {

    const threadId = req.params.threadsId;

    const myThread = await openai.beta.threads.retrieve(threadId);


      res.json(myThread);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/createthread:
 *   get:
 *     summary: Create a new thread
 *     description: Creates a new, empty thread using the OpenAI API.
 *     responses:
 *       200:
 *         description: Successfully created a new thread
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   description: The newly created thread ID.
 *                 object:
 *                   type: string
 *                   description: Object type (usually 'thread').
 *                 # Add other properties as per the response structure
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/createthread', async (req, res) => {
  try {
      // const response = await axios.get('https://api.openai.com/v1/threads', {
      //     headers: {
      //         'Content-Type': 'application/json',
      //         'Authorization': `Bearer ${openaiApiKey}`,
      //         'OpenAI-Beta': 'assistants=v1'
      //     }
      // });
      const emptyThread = await openai.beta.threads.create();

      res.json(emptyThread);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/createmessage/{threadId}:
 *   post:
 *     summary: Create a new message in a thread
 *     description: Creates a new message in the specified thread using the OpenAI API.
 *     parameters:
 *       - in: path
 *         name: threadId
 *         required: true
 *         description: Unique identifier of the thread.
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - content
 *             properties:
 *               content:
 *                 type: string
 *                 description: The content of the message to be created.
 *     responses:
 *       200:
 *         description: Successfully created a new message in the thread
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   description: The newly created message ID.
 *                 object:
 *                   type: string
 *                   description: Object type (usually 'message').
 *                 # Define other properties as per the response structure
 *       400:
 *         description: Invalid input, object invalid
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.post('/createmessage/:threadId', async (req, res) => {
  try {
      const threadID = req.params.threadId;
      const { content } = req.body; // Extract content from request body

      // Ensure content is provided
      if (!content) {
        return res.status(400).json({ error: 'Content is required' });
      }

      const messageResponse = await openai.beta.threads.messages.create(
        threadID, {
          role: "user",
          content: content
        }
      );

      res.json(messageResponse);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});


/**
 * @swagger
 * /api/runassistant/{threadId}:
 *   post:
 *     summary: Run assistant for a specific thread
 *     description: Sends a request to OpenAI to run an assistant for the specified thread with provided content.
 *     parameters:
 *       - in: path
 *         name: threadId
 *         required: true
 *         description: Unique identifier of the thread.
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - instructions
 *             properties:
 *               instructions:
 *                 type: string
 *                 description: The content or instructions to send to the assistant.
 *     responses:
 *       200:
 *         description: Successfully ran the assistant and received a response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   description: The message ID.
 *                 object:
 *                   type: string
 *                   description: Object type (usually 'message').
 *                 # Define other properties as per the response structure
 *       400:
 *         description: Invalid input, object invalid
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.post('/runassistant/:threadId', async (req, res) => {
  try {
      const threadID = req.params.threadId;
      const { instructions } = req.body; // Extract content from request body

      // Ensure content is provided
      if (!instructions) {
        return res.status(400).json({ error: 'Content is required' });
      }

      const messageResponse = await openai.beta.threads.runs.create(
        threadID, {
          assistant_id: assistantId,
          instructions: instructions
        }
      );

      res.json(messageResponse);
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while interacting with OpenAI.' });
  }
});

/**
 * @swagger
 * /api/retrieve-run/{threadId}/{runId}:
 *   get:
 *     summary: Retrieve a specific run from a thread
 *     description: Retrieves details of a specific run from a given thread using the OpenAI API.
 *     parameters:
 *       - in: path
 *         name: threadId
 *         required: true
 *         description: Unique identifier of the thread.
 *         schema:
 *           type: string
 *       - in: path
 *         name: runId
 *         required: true
 *         description: Unique identifier of the run.
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Details of the specified run
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   description: The run ID.
 *                 object:
 *                   type: string
 *                   description: Object type (usually 'run').
 *                 # Define other properties as per the response structure
 *       400:
 *         description: Invalid input, object invalid
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/retrieve-run/:threadId/:runId', async (req, res) => {
  try {
    const { threadId, runId } = req.params;

    const run = await openai.beta.threads.runs.retrieve(threadId, runId);

    res.json(run);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while retrieving the run.' });
  }
});

/**
 * @swagger
 * /api/list-messages/{threadId}:
 *   get:
 *     summary: List messages in a thread
 *     description: Retrieves a list of messages from a specified thread using the OpenAI API.
 *     parameters:
 *       - in: path
 *         name: threadId
 *         required: true
 *         description: Unique identifier of the thread.
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: A list of messages from the specified thread
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                     description: The message ID.
 *                   object:
 *                     type: string
 *                     description: Object type (usually 'message').
 *                   # Define other properties as per the response structure
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/list-messages/:threadId', async (req, res) => {
  try {
    const { threadId } = req.params;

    const run = await openai.beta.threads.messages.list(threadId);

    res.json(run.data);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while retrieving the run.' });
  }
});

/**
 * @swagger
 * /api/delete-thread/{threadId}:
 *   get:
 *     summary: Delete a specific thread
 *     description: Deletes a thread with the specified ID using the OpenAI API.
 *     parameters:
 *       - in: path
 *         name: threadId
 *         required: true
 *         description: Unique identifier of the thread to be deleted.
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Successfully deleted the thread
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 # Define the properties of the response object if available
 *       500:
 *         description: Error response
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   description: Error message
 */
router.get('/delete-thread/:threadId', async (req, res) => {
  try {
    const { threadId } = req.params;

    const run = await openai.beta.threads.del(threadId);

    res.json(run);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while deleting thread.' });
  }
});

module.exports = router;
